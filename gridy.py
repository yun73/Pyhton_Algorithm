'''
욕심쟁이 판다

- 대나무 숲 : nxn 크기

- 대나무 다 먹으면 => 상하좌우 중 한 곳으로 이동

- 조건
    - 욕심이 매우 많아 대나무 먹고 자리 옮기면 옮긴 지역의 대나무 전 지역보다 많아야 함

- 판다가 최대한 많은 칸 이동하려면 어떤 경로로 가야해?
- 이동할 수 있는 칸의 최대값

이동한 칸 기준 전에 있던 칸은 항상 대나무가 적을 거야
그러면 처음에 각 위치마다 대나무 큰 지역이 몇 개 있는지 기록
근데 몇개 있는지 기록하는 것만으로는 부족할 거 같은데
각 좌표간에 단반향 간선이 존재

최악의 경우 500*500*4방향*깊이?
'''

dr = [1,-1,0,0]
dc = [0,0,1,-1]
n = int(input())
forest = [list(map(int, input().split())) for _ in range(n)]
dp = [[0]*n for _ in range(n)]
# 이동칸 수 최대 값
max_move = 0
for r in range(n):
    for c in range(n):
        # 만약 미리 조사된 값이 없으면 주변 탐색
        if dp[r][c]:
            continue
        # 현재 위치에서 최대 탐색 깊이 dp[r][c]
        dp[r][c] = 1
        # 현재 위치에서 상하좌우 탐색
        # 4방향 조사 후의 리스트 내 최대 값이 현재 위치에서의 최대 이동거리
        move = [0]*4
        for i in range(4):
                nr,nc = r+dr[i], c+dc[i]
                # 만약 나보다 큰 곳인데 dp값이 있으면해당 값 + 1 을 move의 i 번 자리에
                # 만약 나보다 큰 곳인데 dp값 없으면 dfs 탐색으로 해당 위치에서의 최대 거리 구해줘
                # dfs 탐색하면서 지나는 점들도 최대 거리가 알아서 구해짐
                if 0<=nr<n and 0<=nc<n and forest[nr][nc] > forest[r][c]:
                      


                    pass