'''
# 컴퓨터적 사고 기초논리 & 수학
'''
'''
## 논리
hard logic - 프로그래밍 언어 표현들이 모두 논리학에서 나옴, 알고리즘 위해
soft logic - 일상생활 - 어떤 의미인지 사람들이 알고 있다고 가정
카드게임 - 맥주집

둘 중 맥주집 문제가 더 쉽게 느껴졌으면 
논리를 사용한게 아니라 직관을 사용한 것
직관은 논리적인 느낌을  주느것
빠르지만 정확하지 않고, 착각을 일키기도 쉬움

- 명제
    - 참이나 거짓을 알 수 있는 식이나 문장
    
- 진릿값
    - 참이나 거짓을 표현 > T,F or 1,0

- 진리표

-연산
    - 부정 Not ㄱ, ~
    - 논리곱 And (명제에 대해)
    - 논리합 or
    - 배타적 논리리합 XOR
- 합성
    - 연산자 우선순위
    - 항진명제 : 진릿값이 항상 참
    - 모순명제 : 진릿값이 항상 거짓
    - 사건명제 : 항진명제도 모순명제도 아닌 명제
    - 조건명제 : p이면 q 이다 ( p:T. q:F => p->q : F)
    - 쌍방조건 명제 : p면q고 q면p다
    - 조건명제의 역, 이, 대우
        - 역 : q->p
        - 이 : ㄱp->ㄱq 
        - 대우 : ㄱp->ㄱq 
        - 명제의 대우와 같다
        
- 수학적 귀납법
    - P(n) -> P(n+1)이 참임을 보이는 것 뿐 P(n)이 참일 필요 없음
    
- 증명연습
    - Trivial Proof : P(x)->Q(x) 를 증명하려는데, Q(x) 가 항상 참인 경우
        - Q(x) 가 참임을 증명하면 명제가 참임을 증명할 수 있다.
    - Vacuous Proof : P(x)->Q(x) 를 증멸하려는데, P(x) 가 항상 거짓인 경우 
        - P(x) 가 거짓임을 증명하면 명제가 참임을 증명할 수 있다.
        
    - 모든 x에 대해서는 반례를 찾아라
    - 어떤 x 에 대해서는
    
2. 수와 표현
    - 컴퓨터는 0/1을 표현할 수 있는 비트들을 모아 수를 표현
    - k 개의 비트 사용시 0부터 2^k-1 개의 수 표현 가능
    - 어떤 값 n을 표현하기 위해서는 몇개의 비트 필요?
        - 2^k -1 >= n 이 성립해야 함
        - k = log_2_n
        
3. 집합과 조합론
    - 조합론은 경우의 수를 따지는 문제들을 보통 말한다.
        - nCr

4. 기초수식
    - 알고리즘의 시간 복잡도를 표현할 수 있는 다양한 식
    - 연습문제들
        - 재귀식들을 O() notation 수준으로 풀어라
        - 문제 1 :  T(n) = T(n-1) + 1. T(0) = 1 
                        = T(n-2) + 1 + 1
                        = T(n-3) + 1 + 1 + 1
                        = T(n-k) + k
                        = 1 + n
                    => O(n)
        - 문제 2 : T(n) = T(n-1) + n. T(0) = 1 
                        = T(n-2) + (n-1) + n
                        = T(n-3) + n-2 + n-1 + n
                        = T(n-k) + (n-k) + ...+ (n-1) + n
                        = T(0) + 1 + .... + n
                        = 1 + n(n+1)/2
                    => O(n^2)

5. 재귀
    - 재귀는 자기 자신을 호출하는 함수
    - 다른입력으로 함수를 끝낼 수 있음
    - 함수랑 어떤 문제를 해결하는 방법을 코딩한 것
    - 어떤 한 케이스만을 해결하는 것 아님
    -
'''