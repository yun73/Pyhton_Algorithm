''''''
'''
- BFS(너비우선탐색)
    -시작점의 인접한 정점들을 먼저 모두 차례로 방문한 후에 방문했던 정점을 시작점으로
    하여 다시 인접한 정점들을 차례로 방문하는 방식
    - 인접한 정점들에 대해 탐색 후, 차례로 다시 너비우선 탐색을 해야하므로
    선입선출의 형태의 자료구조인 큐를 활용
    - [ A , A[B, C, D], B[E F], D[G H I] ]
'''

# 자료의 구조를 위에서 부터 내려오는 식으로 보면 각 층을 다 돌면서
# 연결된 곳을 큐에 추가해주고 내려와서 그 칸들을 돌면서 반복하기 때문에
# 가장 먼 점의 거리를 구핳 수가 있다
# 이전 방문한 곳을 표시한 후 그 값에 +1하면 체크하는 동시에 구할 수 있다다# 중복되는 enQueue 없애기 위해서
# 근데 그러면 1층 실행학 다음층을 얼마나 실행?
# 1층에서 인접요소들을 append 해주고
# 1층에 인접하는 개수만큼만 다음번에 수행


def Bfs(G, v, n):
    visited = [0] *(n+1)        # n : 정점의 개수
    queue = []                  # 큐 생성
    queue.append(v)             # 시작점 v를 큐에 삽입
    visited[v] = 1
    while queue :               # 큐가 비어있지 않은 경우
        t = queue.pop(0)        # 큐의 첫번째 원소 반환
        # visit(t)
        for i in G[t]:          # t와 연결된 모든 정점에 대해
            if not visited[i]:  # 방문되지 않은 곳이라면
                queue.append(i) # 큐에 넣기
                visited[i] = visited[n] = 1 # n 으로부터 1만큼 이동