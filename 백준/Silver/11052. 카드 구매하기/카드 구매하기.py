# 카드 구매하기
# 8가지 등급
# 카드 N개가 포함된 카드팩이 N가지 존재
# 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신
# N개의 카드를 구매하기 위해 지불해야 하는 금액의 최댓값

N = int(input())
P = [0] + list(map(int, input().split()))

dp = [0 for _ in range(N+1)]

# 1 부터 N 까지 N개의 카드를 고를 때의 최대값(dp[N])을 구할 건데
for i in range(1,N+1):
    # 각 경우에 i장의 카드를 뽑는 경우의 드는 비용은
    # P[i] + dp[N-i] 즉,
    # 현재 내가 사는개수의 비용과 N개 에서 내가 살 개수를 제외한 경우의 최대값을 더한것이다.
    # 근데 3의 경우 dp[2] + p[1], dp[1] +p[2] 와 같이
    # 더 개수가 작은 덱에서 현재 값을 만들 수 있고 또 민규는 조건과 같은 미신을 믿기 때문에
    # 모두 확인하며 최대값을 갱신해줘야 한다.
    # 따라서 k 는 가장 작은 수인 1부터 현재 구매해야 하는 개수 전 까지를
    # 비용 + 제외한 최대값 과 비교하며 갱신하자
    for k in range(1,i+1):
        dp[i] = max(dp[i], dp[i-k] + P[k])


print(dp[N])

