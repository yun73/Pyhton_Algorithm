import math
# 포켓볼 전략 세우기
# 일단 목적구를 쿠션시키기 보단 내공을 논쿠션, 쿠션으로 가능한 방법들을 찾아서 거기서 제일 좋은 방법으로
# 해당 내용을 모든 타겟에 대해서 반복

# 1. 모든 홀에서 목적구 점점의 원 중심 까지의 거리와 방향을 구한다
    # 내 목적구를 다 맞추면 8번에 대한 접점 조사 및 경로조사는 상대방 공 있는지만
    # 해당 접점까지 가는데 8번이나 상대방 공이 있으면??
    # 상대방 공에 대해서도 홀에 넣을 수 있는 접점들을 모두 구해준다
    # 만약 내 공에 대한 접점과 상대방의 접점이 같으면 접점 리스트에 넣으면 안됨
    # 아니면 가능한 접점들을 리스트에 넣어준다

# 2. 해당 접점에서 내 공까지 올 수 있는 경로를 확인한다
    # 해당 방향에서 -90에서 90 사이에서 와야돼
    # 해당 접점에서 각도를 계속 바꿔 가면서 방해 없이 내가 쳐야할 공에 올 수 있는 지를 조사하ㅣ고
    # 조사하면서 도달할 때는 거리를 같이 기록해줘 그넫 무한 반복 돌면 안되니까 탐색할 최대 거리 지정
    # 아니면 원쿠션만 가능하게 해서 부딛힐 때 좌표를 기록해서 넣어죽고 2번째 부디히기 전까지
    # 부딛힌 좌표와 내가 쳐야할 공의 위치를 이용해서 쳐야할 방향각을 구하고
    # 찾으면 해당 접점으로 가기 위한 방향 과, 거리를 이용해서 반환

# 3. 없을 경우엔 그냥 경로에 상대방 공이 없는 내 공을 하나 쳐


# 4. 가능하다면 내 공을 애매한 위치로 보내서 파올을 유도해ㅜㅠ ㅜ
# 남은 목적구가 한 개 되기 전까지는 8번공을 넣으면 안됨

# 내가 치는 공은 1개 맞춰야할 공은 여러개 이므로

# 그 여러개의 가능한 위치를 구하여 거기서 부터 목적구를 찾으러 간다

# 내게 주어진 공 리스트 들에서 하나씩 꺼내와서
# 모든 홀에서 해당 공까지의 거리와 각도를 구해주고
# 방위각으로 구해주자 그러면 니중에 되돌아 가는 방향의 각은
# 해당 각의 +180도
#
# 가도 되는 리스트
# 가면 안되는 리스트

hole = []
target1 = []
target2 = []

# 공의 반지름
r = 5.7
my_ball = ()

# 내 공과 홀의 거리
bh = math.sqrt((hole_x-my_ball_x)**2 + (hole_y-my_ball_y)**2)
# 목적구와 홀의 거리
th =  math.sqrt((hole_x-taget_x)**2 + (hole_y-target_y)**2)
# 내 공과 목적구의 거리
th =  math.sqrt((taget_x- my_ball_x)**2 + (target_y-my_ball_y)**2)
