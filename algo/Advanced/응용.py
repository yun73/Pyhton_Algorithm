''''''
'''
# SW 문제 해결 역량
# 복잡도 분석
## 알고리즘
    - 알고리즘 : 유한한 단계를 통해 문제를 해결하기 위한 절차나 방법
    
    - 알고리즘의 효율
        - 공간적 효율성과 시간적 효율성
            - 공간적 효율성 : 연산량 대비 얼마나 적은 메모리 공간을 요하는가
            - 시간적 효율성 : 연산량 대비 얼마나 적은 시간을 요하는 가
            - 효율성을 뒤집어 표현하면 복잡도(Complexity) => 복잡도 높으면 효율성 저하

        - 시간적 복잡도 분석
            - 하드웨어 환경에 따라 처리시간 달라짐 : 장비 성능
            - 소프트웨어 환경에 따라 처리시간 달라짐 : 언어, 운영체제, 컴파일러 종류
    
    - 복접도의 점근적 표기
        - 시간 또는 공간 복잡도는 입력 크기에 대한 함수로 표기함
        - 이를 단순한 함수로 표현하기 위해 점근적 표기(Asymptotic Notation) 사용
        
            - 빅 오 - 점근적 상한 - 실행시간이 n^2 에 비례하고 이거보다는 덜 걸릴 거야 최악은 이거만큼 걸려
           
            - 빅오메가 - 점근적 하한 - 최소한 이만한 시간은 걸린다
            
            - 빅 세타 표기 = 빅오와 빅오메가가 같은 경우 - n이 증가함에 따라 n^2과 동일한 증가율

## 표준입출력
- 입력
    -Raw 값의 입력 : input()
        - 받은 입력값 문자열 취급
    -Evaluated된 값 입력 : eval(input())
        받은 입력값 평가된 데이터 형으로 취급
    
- 출력
    -print()
        -표준 출력함수.출력값의 마지막에 개행문자 포함
    -print('text', end = '')
        - 출력시 마지막에 개행문자 제외시
    -print('%d' %number)
        - Fommatting 된 출력

- 파일의 내용을 표준 입력으로 읽어오는 방법
    ```
    import sys
    sys.stdin = open('input.txt', 'r')
    sys.stdout = open('output', 'w')
    ```
    
- 2차원 리스트 입력 받을 때 둘러싼 지역을 추가 하고 싶으면
    `arr = [[0]*(N+2)] + [[0] + list(map(int, input().split())) + [0] for _ in range(N)] + [[0]*(N+2)] `
    위의 식으로 해결 가능
    
'''



