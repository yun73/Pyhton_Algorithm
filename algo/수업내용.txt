알고리즘 - 문제를 해결하기 위한 절차나 방법

알고리즘 표현방식 - 슈도코드, 순서도

정확성, 작업량, 메모리, 단순성, 최적성

시간복잡도 = 빅오표기법

배열 = 일정한 자료형의 변수들을 하나의 이름으로 열거하여 사용하는 자료구조
> 필요성 - 여러개 변수 필요시, 일일이 다른 변수명 사용은 비효율적
하나의 선언 통해 둘 이상의 변수 선언을 통해 하기 힘든 작업 배열 이용해 쉽게

순열
서로 다른 것들 중 몇 개 뽑아서 한줄로 나열
```py
for i1 in range(1,4):
    for i2 in range(1,4):
        if i2 != i1:
            for i3 in range(1,4):
                if i3 != i1 and i3 != i2:
                    print(i1,i2,i3)
```

정렬 = 2개 이상의 자료를 특정 기준에 의해 재배열

버블정렬 - 인접한 두 개의 원소를 비교하며 자리를 계속 교환하는 방식
첫번째 부터 마지막 자리까지 인접한 원소끼리 자리 교환하면서 이동
한단계 끝나면 가장 큰 원소가 마지막 자리로 = for문 돌릴 때 n-1 자리부터 채우기
```py
T = int(input())
for tc in range(1, T + 1):
    N = int(input())
    arr = list(map(int, input().split()))

    for i in range(N-1,0,-1): # i 구간의 마지막 인덱스
        for j in range(0,i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

    print(f'#{tc}', *arr)
```

카운팅정렬 - 항목들의 순서결정 위해 각 항목이 몇개씩 있는지 세는 작업, 성형시간에 정렬하는
효율적인 알고리즘, 정수나 정수로 표현가능할 떄, 정수항목으로 인덱스 생성
카운트 하기 위해서 가장 큰 값의 크기로 함
```py
def Counting_Sort(A, B, k):
    # A [] 입력배열, 정렬 대상
    # B [] 정렬된 배열
    # C [] 카윤트 배열

    C = [0] * (k + 1)
    # C :  카운트 배열(원소의 개수를 세주고, 자리를 정해준다.)
    # C[i] = i 의 등장횟수

    # 각 원소의 등작 횟수 세준다.
    for i in range(len(A)):
        # C[A[i]] += 1
        C[A[i]['num']] += 1
    # 각 원소의 등장횟수 계산 후, 각 원소 들어갈 자리 위치 구하기
    for i in range(1, len(C)):
        # i는 i보다 작은 수가 몇개 있는 지를 알면 그 뒤부터 나온다는걸 알기 떄문에
        C[i] += C[i - 1]

    # 뒤에서부터 A를 확인하면서 자리를 확인하고 채워준다.
    # 뒤에서 부터 하는 이유는 안정 정렬(원래 배열의 순서 보장)
    # 자리를 채워줄 때마다 1씩 감소시켜줘야 한다. (자리 중복 피하기 위해서)
    for i in range(len(B) - 1, -1, -1):
        # C[A[i]] => A[i] 가 들어갈 자리를 가르킴 들어가기전에 1뺴기
        # C[A[i]] -= 1
        C[A[i]['num']] -= 1
        # 자리에 A[i] 넣어주기
        # B[C[A[i]]] = A[i]
        B[C[A[i]['num']]] = A[i]
```
선택정렬 = 주어진 자료들 중 가장 작은 갑싀 원소부터 차례대로 선택하여
위치를 교환하는 방식
```py
def selectionSort(a, N):
    for i in range(N-1):
        minidx = i
        for j in range(i+1, N):
            if a[minidx] > a[j]:
                minidx = j
        a[i], a[minidx] = a[minidx], a[i]


# k 번째 작은 수
def selectionSort(a, k):
    for i in range(0,k):
        minidx = i
        for j in range(i+1, len(a)):
            if a[minidx] > a[j]:
                minidx = j
        a[i], a[minidx] = a[minidx], a[i]
    return a[k-1]
```


완전 검색
문제 해법으로 생각할 수 있는 모든 경우의 수 나열 후 확인

탐욕 알고리즘
그 순간에 최적이라고 생각하는거 선택
지역적으로는 최적이자만 최종적인 해답은 최적 아님

부분집합
```py
# 비트 연산자
# 보다 간단하게 구현하는 방법
arr = [1,2,3,4,5,7]
n= len(arr)  # n 집합의 원소의 개수

# 모든 부분 집합 검사
# 1<<n 부분집합의 개수 2*n 이랑 똑같은 거임 2^6 == 1<<6 == 1*2^6
for i in range(1<<n):   # 부분 집합의 개수만큼 반복
    # i 번째 부분집합을 검사하겠다
    # i 번째 부분집합이 n개의 원소 중에 j 번쨰 원소를 포함하는지
    for j in range(n):  # 원소의 수만큼 비트를 비교 3<<4 == 3 * 2^4
        if i & (1 << j):  # 부분집합 i가 j번째 원소를 포함했는지 비트가 1인 경우
            print(arr[j],end =', ')  # j 번 원소 출력
    print()
print()
```

검색 - 순차, 이진, 해쉬

이진검색
자료의 가운데에 있는 항목의 키 ㄱ밧과 비교하여 다음 검색의 위치 결정
자료 정렬된 상태여야 함
```py
# 이진 검색
# 자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행
# 목적 키를 찾을 때 까지 이진 검색을 순환적으로 반복 수행
# 이진 검색을 위해서 자료가 정렬되어 있어야 함
# 구현
def binary_search(a, N, key):
    start = 0
    end = N-1
    while start <= end : # 탐색구간이 존재, 원소 한개 이상이면 탐색하야함
        middle = (start + end)//2
        if a[middle] == key : # 검색성공
            return True
        elif a[middle] > key :
            end = middle -1
        else:
            start = middle +1

    return False

```
